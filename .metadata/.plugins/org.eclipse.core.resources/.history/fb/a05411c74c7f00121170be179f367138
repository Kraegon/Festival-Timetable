import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JTextField;

class EditListener implements ActionListener{
	private JFrame frame;
	private JComponent[] comps;
	private FestivalObject toEdit;
	/**
	 * Constructor for the InputListerener to 
	 * @param frame : To be closed at the end of execution.
	 * @param comps : Components to read out.
	 */
	public EditListener(JFrame frame, JComponent[] comps, FestivalObject toEdit){
		this.frame = frame;
		this.comps = comps;
		this.toEdit = toEdit;
	}
	
	public void actionPerformed(ActionEvent arg0) {
		Object[] inputDetails = new Object[4];
		int counter = 0;
		for(int i = 0; i < comps.length; i++){
			if(comps[i].getClass() == JTextField.class){
				JTextField compTemp = (JTextField) comps[i];
				inputDetails[counter] = compTemp.getText();
				counter++;
			} 
			if(comps[i].getClass() == JCheckBox.class){
				JCheckBox compTemp = (JCheckBox) comps[i];
				inputDetails[counter] = compTemp.isSelected();
				counter++;
			}
		}
		if(toEdit.getClass() == Artist.class){
			Artist artist = (Artist) toEdit;
			artist.setName((String) inputDetails[0]);
			artist.setGenre((String) inputDetails[1]);
			artist.setMisc((String) inputDetails[2]);
		} else if (toEdit.getClass() == Stage.class){
			Stage stage = (Stage) toEdit;
			stage.setName((String) inputDetails[0]);
			stage.setVisitorsMax(Integer.parseInt((String) inputDetails[1]));
			stage.setIsMainStage((boolean) inputDetails[2]);
		} else if (toEdit.getClass() == Performance.class){
			Performance performance = (Performance) toEdit;
		}
		frame.dispose();
	}
	
}